{"version":3,"file":"index.js","sources":["../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/register.ts","../../server/src/config/index.ts","../../server/src/content-types/index.ts","../../server/src/controllers/dragdrop.ts","../../server/src/controllers/settings.ts","../../server/src/controllers/index.ts","../../server/src/middlewares/index.ts","../../server/src/policies/index.ts","../../server/src/routes/dragdrop.ts","../../server/src/routes/settings.ts","../../server/src/routes/index.ts","../../server/src/services/dragdrop.ts","../../server/src/services/settings.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/strapi';\n\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\n  // bootstrap phase\n};\n\nexport default bootstrap;\n","import type { Core } from '@strapi/strapi';\n\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n","import type { Core } from '@strapi/strapi';\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  // register phase\n};\n\nexport default register;\n","export default {\n  default: {},\n  validator() {},\n};\n","export default {};\n","import type { Core } from '@strapi/strapi';\nimport { z } from 'zod';\nimport { PluginSettingsResponse } from '../../../typings';\n\nconst RankUpdateSchema = z.object({\n  id: z.number(),\n  rank: z.number(),\n});\nconst BatchUpdateRequestSchema = z.object({\n  contentType: z.string(),\n  updates: z.array(RankUpdateSchema),\n});\n\nconst controller = ({ strapi }: { strapi: Core.Strapi }) => ({\n\n  async welcome(ctx) {\n    const dragdropService = strapi.plugin(\"drag-drop-content-types\").service(\"dragdrop\");\n\n    try {\n      ctx.body = await dragdropService.getWelcomeMessage();\n    }\n    catch (err) {\n      ctx.throw(500, err);\n    }\n  },\n\n  async sortIndex(ctx) {\n    const dragdropService = strapi.plugin(\"drag-drop-content-types\").service(\"dragdrop\");\n\n    try {\n      ctx.body = await dragdropService.sortIndex(\n        ctx.request.body.contentType,\n        ctx.request.body.start,\n        ctx.request.body.limit,\n        ctx.request.body.locale,\n        ctx.request.body.rankFieldName\n      );\n    } catch (err) {\n      ctx.throw(500, err);\n    }\n  },\n\n  async batchUpdate(ctx) {\n    const settingService = strapi.plugin(\"drag-drop-content-types\").service(\"settings\");\n    const dragdropService = strapi.plugin(\"drag-drop-content-types\").service(\"dragdrop\");\n\n    try {\n      const config: PluginSettingsResponse = await settingService.getSettings();\n\n      const payload = await BatchUpdateRequestSchema.parseAsync(\n        ctx.request.body\n      );\n      try {\n        ctx.body = await dragdropService.batchUpdate(config, payload.updates, payload.contentType);\n      } catch (err) {\n        ctx.throw(500, err);\n      }\n    } catch (err) {\n      ctx.throw(400, err);\n    }\n  },\n\n});\n\nexport default controller;\n","import type { Core } from '@strapi/strapi';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n\n  async getSettings(ctx) {\n        const settingService = strapi.plugin(\"drag-drop-content-types\").service(\"settings\");\n\n        try {\n            ctx.body = await settingService.getSettings();\n        }\n        catch (err) {\n            ctx.throw(500, err);\n        }\n    },\n\n    async setSettings(ctx) {\n        const settingService = strapi.plugin(\"drag-drop-content-types\").service(\"settings\");\n        const { body } = ctx.request;\n        \n        try {\n            await settingService.setSettings(body);\n            ctx.body = await settingService.getSettings();\n        }\n        catch (err) {\n            ctx.throw(500, err);\n        }\n    }\n\n});\n","import dragdrop from './dragdrop';\nimport settings from './settings';\n\nexport default {\n  dragdrop,\n  settings,\n};\n","export default {};\n","export default {};\n","export default {\n    //type: admin: internal and can be accessible only by the admin part (front-end part) of the plugin\n    //type: content-api: accessible from external classical rest api, need to set access in strapi's Users & Permissions plugin\n    //call: http://localhost:1337/api/drag-drop-content-types/ and you'll receive getWelcomeMessage()\n\n    type: 'admin', //changed from content-api to admin\n    routes: [\n        {\n            method: 'GET',\n            path: '/welcome',\n            handler: 'dragdrop.welcome',\n            config: { \n              policies: [],\n              auth: false,\n            }\n        },\n        {\n            method: 'POST',\n            path: '/sort-index',\n            handler: 'dragdrop.sortIndex',\n            config: {\n              policies: [],\n              auth: false,\n            },\n          },\n          {\n            method: 'PUT',\n            path: '/batch-update',\n            handler: 'dragdrop.batchUpdate',\n            config: {\n              policies: [],\n              auth: false,\n            },\n          },\n      \n    ]\n}","export default {\n    type: 'admin',\n    routes: [\n        {\n            method: 'GET',\n            path: '/settings',\n            handler: 'settings.getSettings',\n            config: { policies: [] }\n        },\n        {\n            method: 'POST',\n            path: '/settings',\n            handler: 'settings.setSettings',\n            config: { policies: [] }\n        }\n    ]\n}","import dragdrop from './dragdrop';\nimport settings from './settings';\n\nexport default {\n  dragdrop,\n  settings,\n};\n","import type { Core } from '@strapi/strapi';\nimport type * as StrapiTypes from '@strapi/types/dist';\nimport { PluginSettingsResponse, RankUpdate } from '../../../typings';\n\nconst dragdrop = ({ strapi }: { strapi: Core.Strapi }) => ({\n  getWelcomeMessage() {\n    return {\n      body: 'Welcome to Strapi ðŸš€',\n    };\n  },\n\n  async sortIndex(\n    contentType: StrapiTypes.UID.CollectionType,\n    start: number,\n    limit: number,\n    locale: string,\n    rankFieldName: string\n  ) {\n    let indexData = {\n      sort: {},\n      populate: '*',\n      start: start,\n      limit: limit,\n      locale: locale,\n    };\n    indexData.sort[rankFieldName] = 'asc';\n    try {\n      return await strapi.documents(contentType).findMany(indexData);\n    } catch (err) {\n      return {};\n    }\n  },\n\n  /**\n   *\n   * @param {RankUpdate[]} updates\n   * @param {StrapiTypes.UID.CollectionType} contentType\n   */\n  async batchUpdate(\n    config: PluginSettingsResponse,\n    updates: RankUpdate[],\n    contentType: StrapiTypes.UID.CollectionType\n  ) {\n    const shouldTriggerWebhooks = config.body.triggerWebhooks;\n    const sortFieldName = config.body.rank;\n    const results = [];\n\n    strapi['apiUpdate'] = true;\n\n    for (const update of updates) {\n      const allLocalizations = await strapi.db.query(contentType).findOne({\n        where: { id: update.id },\n        populate: ['localizations'],\n      });\n\n      const { localizations, ...origin } = allLocalizations;\n      for (const entry of [origin, ...localizations]) {\n        const updatedEntry = await strapi.db.query(contentType).update({\n          where: { id: entry.id },\n          data: {\n            [sortFieldName]: update.rank,\n          },\n        });\n\n        if (updatedEntry?.id) {\n          results.push(updatedEntry);\n        }\n      }\n\n      // Trigger webhook listener for updated entry\n      //see: https://forum.strapi.io/t/trigger-webhook-event-from-api/35919/5\n      if (shouldTriggerWebhooks) {\n        const info: Record<string, unknown> = {\n          model: contentType.split('.').at(-1),\n          entry: {\n            id: origin.id,\n            ...origin,\n          },\n        };\n\n        await strapi.get('webhookRunner').executeListener({\n          event: 'entry.update',\n          info,\n        });\n      }\n    }\n\n    strapi['apiUpdate'] = undefined;\n\n    return results.map((entry) => ({\n      id: entry.id,\n      rank: entry[sortFieldName],\n    }));\n  },\n});\n\nexport default dragdrop;\n","import type { Core } from '@strapi/strapi';\nimport { PluginSettingsResponse } from '../../../typings';\n\nconst getPluginStore = () => {\n    return strapi.store({\n        environment: '',\n        type: 'plugin',\n        name: 'drag-drop-content-types',\n    });\n};\n\nconst createDefaultConfig = async () => {\n    const pluginStore = getPluginStore();\n    const value: PluginSettingsResponse = {\n        body: {\n            rank: 'rank',\n            title: '',\n            subtitle: '',\n            triggerWebhooks: false,\n        },\n    };\n    ;\n    await pluginStore.set({ key: 'settings', value });\n    return pluginStore.get({ key: 'settings' });\n};\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n\n    async getSettings() {\n        const pluginStore = getPluginStore();\n        let config = await pluginStore.get({ key: 'settings' });\n        if (!config) {\n            config = await createDefaultConfig();\n        }\n        return config;\n    },\n\n    async setSettings(settings) {\n        const value = settings;\n        const pluginStore = getPluginStore();\n\n        await pluginStore.set({ key: 'settings', value });\n        return pluginStore.get({ key: 'settings' });\n    },\n\n});","import dragdrop from './dragdrop';\nimport settings from './settings';\n\nexport default {\n  dragdrop,\n  settings,\n};\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\nimport contentTypes from './content-types';\nimport controllers from './controllers';\nimport middlewares from './middlewares';\nimport policies from './policies';\nimport routes from './routes';\nimport services from './services';\n\nexport default {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\n"],"names":["strapi","z","config","dragdrop","settings"],"mappings":"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"}